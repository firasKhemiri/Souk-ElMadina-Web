<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{

    public function getAllPosts($currentPage)
    {
        // Create our query
        $query = $this->createQueryBuilder('p')
            ->getQuery();

        // No need to manually get get the result ($query->getResult())

        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
    }


    public function paginate($dql, $page)
    {
        $limit = 12;

        $paginator = new Paginator($dql);

        $paginator->getQuery()
            ->setFirstResult(($page - 1) * $limit)// Offset
            ->setMaxResults($limit); // Limit

        return $paginator;
    }


    public function filterArts($currentPage, $nom_art = '', $cats = '', $type_tri = '', $gov = '', $pmin = 0, $pmax = 1050, $abon = '', $nom_bout = '')
    {


        // Create our query
        $query = $this->createQueryBuilder('a')
            ->join('a.vendeur', 'v')
            ->join('v.user', 'uv')
            //  ->join('v.abonnes','ab')
            ->join('a.categorie', 'c')
            ->where('a.nom LIKE :nom_art')
            ->andWhere('a.prix >= :pmin')
            ->andWhere('a.prix <= :pmax')
            ->andWhere('v.nom_boutique LIKE :nom_bout')
            ->andWhere('uv.state LIKE :gov');


        if ($cats != "" && !is_null($cats)) {

            $cats = json_decode($cats);
            // $catss = explode(",", $cats);

            $first = true;
            $i = 0;

            foreach ($cats as $c) {
                if ($first) {
                    $query
                        ->andWhere('c.nom LIKE :cat' . $i)
                        ->setParameter('cat' . $i, '%' . $c . '%');
                    $first = false;
                    $i++;
                } else {

                    $query
                        ->orWhere('c.nom LIKE :cat' . $i)
                        ->setParameter('cat' . $i, '%' . $c . '%');
                    $i++;
                }
            }

        }

        switch ($type_tri) {
            case "Prix croissant":
                $query
                    ->orderBy('a.prix', 'ASC');
                break;
            case "Prix decroissant":
                $query
                    ->orderBy('a.prix', 'DESC');
                break;
            case "Date pub croissant":
                $query
                    ->orderBy('a.date_pub', 'ASC');
                break;
            case "date pub decroissant":
                $query
                    ->orderBy('a.date_pub', 'DESC');
                break;
            case "Alphabetique":
                $query
                    ->orderBy('a.nom', 'ASC');
                break;

            default:
                $query
                    ->orderBy('a.id', 'DESC');
        }

        $query
            ->setParameter('nom_art', '%' . $nom_art . '%')
            ->setParameter('pmin', $pmin)
            ->setParameter('pmax', $pmax)
            ->setParameter('nom_bout', '%' . $nom_bout . '%')
            ->setParameter('gov', '%' . $gov . '%')
            ->getQuery();

        // No need to manually get get the result ($query->getResult())

        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
    }


    /*
        public function filterArts($currentPage,$nom_art='',$cat='',$type_tri='',$gov='',$pmin=0, $pmax=150,$abon='',$nom_bout='')
        {
    
            $requete = " select * from article a " .
            "JOIN articles_vendeurs av ON a.id = av.article_id " .
            "JOIN vendeur v ON av.vendeur_id = v.id " .
            "JOIN user u ON u.id = v.id ".
            "JOIN categories_articles ac ON a.id = ac.article_id " .
            "JOIN categorie c ON ac.categorie_id = c.id " ;
    
                  /*  if ($abon == "Mes abonnements")
                    {
                        $requete = requete + " " + "JOIN abonnements ab ON v.id = ab.vendeur_id " .
                            "WHERE ab.acheteur_id = "+$statCuser.getId()+" AND ";
                    }
                    else*
                        $requete = $requete . " " . "WHERE ";
    
                    $requete2 =  "u.state LIKE '%".$gov."%' " .
            "AND v.nom_boutique LIKE '%".$nom_bout."%' " .
            "AND a.nom LIKE '%".$nom_art."%' ".
            "AND c.nom LIKE '%".$cat."%' ".
            "AND a.prix BETWEEN '".$pmin."' AND '".$pmax."' ";
    
    
    
                  /*  switch ($type_tri) {
                        case "Prix croissant":
                            $requete2 = $requete2 . " ORDER BY a.prix ASC";
                            break;
                        case "Prix decroissant":
                            $requete2 = $requete2 . " ORDER BY a.prix Desc";
                            break;
                        case "Date pub croissant":
                            $requete2 = $requete2 . " ORDER BY a.date_pub ASC";
                            break;
                        case "date pub decroissant":
                            $requete2 = $requete2 . " ORDER BY a.date_pub DESC";
                            break;
                        case "Alphabetique":
                            $requete2 = $requete2 . " ORDER BY a.nom ASC";
                            break;
                        /* case "":
                             requete = requete + "ORDER BY a.nom DESC";
                             break;
                        }*
    
    
            $requete = $requete ." ".$requete2;
    
            $rsm = new ResultSetMappingBuilder($this->getEntityManager());
            $rsm->addRootEntityFromClassMetadata('AppBundle:Article', 'a');
    
    
            $query = $this->getEntityManager()->createNativeQuery($requete,$rsm);
    
    
    
            /
            try {
                $query = $this->getEntityManager()->getConnection()->query($requete);
            } catch (DBALException $e) {
            }*
    
            $paginator = $this->paginatee($query, $currentPage);
    
            return $paginator;
        }
    
    
    
    
        public function paginatee($query, $page)
        {
            $limit = 12;
            // do a count for all query, create a separate NativeQuery only for that
            $sqlInitial = $query->getSQL();
    
            $rsm = new ResultSetMappingBuilder($query->getEntityManager());
            $rsm->addScalarResult('count', 'count');
    
            $sqlCount = 'select count(*) as count from (' . $sqlInitial . ') as item';
            $qCount = $query->getEntityManager()->createNativeQuery($sqlCount, $rsm);
            $qCount->setParameters($query->getParameters());
    
            $resultCount = (int)$qCount->getSingleScalarResult();
            $this->count = $resultCount;
    
            // then, add the limit - paginate for current page
            $query->setSQL($query->getSQL() . ' limit ' . (($page - 1) * $limit) . ', ' . $limit);
        }
    */


    public function getArticleFromPanier($panier)
    {
        $query = $this->createQueryBuilder('c')->select(['c.id', 'c.nom', 'c.prix', 'c.ref', 'a.quantite'])
            ->join('c.lignes', 'a')
            ->where('a.panier = :panier')
            ->setParameter('panier', $panier);

        $results = $query->getQuery()->getResult();

        return $results;
    }


}
